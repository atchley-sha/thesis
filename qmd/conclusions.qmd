# Conclusions and Recommendations {#sec-conclusions}

{{< include _setup.qmd >}}

Our results

It is clear that there are significant

\

## Notes

ABM is more malleable.
It was easy to throw on the WFH model without having to completely change the rest of the model, and it seemed more realistic than the TBM.
- For planning agencies wanting a model that more easily adapts to unforeseen travel behavior change, an ABM would be preferable

More analyses can be done with ABMs - We were able to replicate each TBM analysis with the ABM and more - We could make more demographic-type analyses with ABM - We were able to compare changes in individual behavior with ABM - Simpler to go about the analysis when thinking on the individual level

non-home-based trips don't really make sense in tbm, in abm they're really easy.

transit: we can see mode switching.

wfh: distance to work is a factor in wfh probability in abm.
Not sure how to do that in tbm, it would have to be a part of trip generation.

analyses that were easier/harder in tbm vs abm

\

Many of the conclusions presented here are specific to the WFRC model and our ActivitySim implementation.
However, some conclusions can apply to trip- and/or activity-based models more broadly, and it is noted when this is the case.

\

{{< pagebreak >}}

We additionally wish to highlight two aspects of this project that have not been discussed so far in this paper.
These are the computational resources used (and runtimes) for each model, and an analysis of the time spent in setting up each model and configuring each scenario.
These two aspects are only tangentially related to the results presented in Chapters [-@sec-landuse]--[-@sec-wfh], but would likely be as important to an agency looking to switch to an ABM.
The following two sections contain a discussion of these two aspects.

## Computational resources {#sec-computational-resources}

All runs of the WFRC model were done on a Windows 10 computer with 2 Intel Xeon Silver 4114 CPUs.
The CPUs have a base frequency of 2.2 GHz with a maximum turbo frequency of 3.0 GHz, and 10 cores/20 threads each.
The WFRC model is configured for multiprocessing in its destination and mode choice steps, and was configured to use 16 threads for our scenario runs.
This machine also has 128 GB of RAM installed, **and we need to check how much it actually uses**.
There were not significant differences in runtimes between each model scenario, and each scenario had a runtime of 16--17 hours.

Most runs of ActivitySim were done on nodes of the BYU supercomputer.
Each node runs Red Hat Enterprise Linux 7.9, and uses an AMD EPYC 7763 CPU at 2.45 GHz.
Each ActivitySim run requested 12 CPU cores and 360 GB of RAM.
Running in single-threaded mode (i.e. only one CPU core was utilized), each run took roughly 5 hours to complete, and used nearly all of the 360 GB of RAM available.
With multi-threading enabled, however, the runtimes decreased to around an hour per scenario, using 72% of the available CPU time across all 12 cores and 88% of the available RAM.
This is a huge difference in runtime between the two models, though crucially ActivitySim had 3 times as much RAM available for use.

ActivitySim offers "chunking" options [@asim-chunking], where large tables are loaded into RAM in chunks rather than all at once.
This can dramatically reduce the amount of RAM required to run an ActivitySim scenario, at the expense of increased runtimes.
For comparison, we ran the baseline scenario in ActivitySim on the same computer used for the WFRC model scenarios, with chunking enabled to account for the amount of RAM available.
With multi-threading set to use 16 threads, and the chunk size set to 112 GB, the baseline ActivitySim scenario ran in about 13 hours.

ActivitySim completed its scenario runs faster than the WFRC model even on the same hardware, though the difference in runtime is less dramatic than with the ActivitySim runs on the BYU supercomputer.
This runs counter to one of the reasons @miller_current_2023 gives for the relatively slow adoption of ABMs: their increased resource requirements and runtimes compared to trip-based models.
Notably, our experience is certainly not universal, and the runtime of any model will greatly depend on several factors, including the specific modeling software and the hardware configuration.
But at least in our case, ActivitySim outperformed the WFRC model with the same hardware, and was an order of magnitude faster with enough RAM to avoid chunking.

## Time Spent

In order to change from a trip-based to an ABM, an agency will need to spend time to understand the model and train its staff.
We analyzed the time spent on each part of the modeling process for this project, and this section provides discussion on this.
Obviously the actual time an agency would require to transition to an ABM depends greatly on many specific factors, but this section is intended to give a very rough approximation of the time and effort needed.

@tbl-time-spent shows the amount of time spent on creating and analyzing each scenario in both models.
These are approximations, as detailed time logs are not available, but should serve to give a general idea of the time spent.
Note as well that these tables show time spent by one graduate and one undergraduate research assistant; more experienced modelers would likely require significantly less time to create and analyze similar scenarios.

```{r}
#| label: tbl-time-spent
#| tbl-cap: time spent
#| tbl-subcap:
#|   - "WFRC Model"
#|   - "ActivitySim"
#| layout-nrow: 2

targets::tar_read(cube_time_spent_table) |>
	flextable() |>
	set_header_labels(task = "Task", hours = "Hours spent (undergraduate RA)") |>
	align(j = ~ hours, align = "c") |>
	align(align = "c", part = "h")
targets::tar_read(asim_time_spent_table) |>
	flextable() |>
	set_header_labels(task = "Task", hours = "Hours spent (graduate RA)") |>
	align(j = ~ hours, align = "c") |>
	align(align = "c", part = "h")
```

The overall time spent for ActivitySim is significantly more than that for the WFRC model, though most of the time for ActivitySim was spent on initial configuration.
In fact, once the baseline ActivitySim scenario had been configured, creating new scenarios often took very little time.
However, there are a few important notes about this comparison.

First, as discussed in @sec-methods, the WFRC model was taken essentially as-is for the baseline scenario.
Some configuration adjustments were required to run the WFRC model on our specific hardware, but these were quite minor.
ActivitySim on the other hand required a significant amount of initial configuration and calibration.
Notably, this initial time investment would be applicable for a switch to *any* new modeling framework regardless of type (trip- or activity-based).

Second, the scenarios in ActivitySim were somewhat dependent on the outputs of the WFRC model.
The most notable of ActivitySim's dependencies is the on the WFRC model's travel skims, as ActivitySim does not perform network assignment and so is unable to determine congested travel times on its own.
In the Transit scenario, for example, the only change needed for ActivitySim was to use updated transit skims, which was extremely quick to implement.
However, these updated skims came from the results of the WFRC model's Transit scenario, and so in some sense the time spent for ActivitySim should possibly include the time spent for the WFRC model.

Finally, the tasks were divided between two research assistants almost exclusively in line with the model type.
This means that @tbl-time-spent is showing the time spent with each model type by a specific individual.
In other words, the difference between these tables is not only the model type, but also the individual working on the task.
Any comparisons between these tables should therefore take this into consideration.

## Recommendations

An agency looking to switch to an ABM would likely not need additional computational resources beyond those used for trip-based models, as discussed in @sec-computational-resources.
However, considering the potential gains in runtime (in the case of ActivitySim, given enough RAM to avoid chunking), it may be worth considering buying or renting additional computational resources.
Computer hardware prices certainly change over time, but as of early 2024, a 12-core, 360 GB RAM computer (using very rough price estimates) would likely cost a few thousand dollars.

\

{{< pagebreak >}}

abms are probably better.
but is the switch worth it?
if you have an existing tbm that works, is the transition cost worth it to get something better?
if it's a lot better, then probably, but if it's only marginally better, then probably not.
how much better it is will depend on a lot of things, but generally speaking more complicated, dense, urban areas are more likely to benefit more from an abm than rural areas.
